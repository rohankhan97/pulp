//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V2021.2 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : jtag_riscv_dbg_agent
// Unit            : dm_ral_pkg
// File            : dm_ral_pkg.sv
//----------------------------------------------------------------------
// Created by      : meggiman
// Creation Date   : 9/24/21 11:18 AM
//----------------------------------------------------------------------
// Title           : jtag_riscv_dbg_agent
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// dm_ral_pkg
//----------------------------------------------------------------------
package dm_ral_pkg;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: abstractauto_reg
   // 
   // Abstract Command Autoexec
   //--------------------------------------------------------------------

   class abstractauto_reg extends uvm_reg;
      `uvm_object_utils(abstractauto_reg)

      rand uvm_reg_field autoexecprogbuf; 
      rand uvm_reg_field autoexecdata; 


      // Function: new
      // 
      function new(string name = "abstractauto_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         autoexecprogbuf = uvm_reg_field::type_id::create("autoexecprogbuf");
         autoexecdata = uvm_reg_field::type_id::create("autoexecdata");

         autoexecprogbuf.configure(this, 16, 16, "RW", 1, 16'h0000, 1, 1, 1);
         autoexecdata.configure(this, 12, 0, "RW", 1, 12'h000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: abstractcs_reg
   // 
   // Abstract Control and Status
   //--------------------------------------------------------------------

   class abstractcs_reg extends uvm_reg;
      `uvm_object_utils(abstractcs_reg)

      uvm_reg_field progbufsize; 
      uvm_reg_field busy; 
      rand uvm_reg_field relaxedpriv; 
      uvm_reg_field cmderr; 
      uvm_reg_field datacount; 


      // Function: new
      // 
      function new(string name = "abstractcs_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         progbufsize = uvm_reg_field::type_id::create("progbufsize");
         busy = uvm_reg_field::type_id::create("busy");
         relaxedpriv = uvm_reg_field::type_id::create("relaxedpriv");
         cmderr = uvm_reg_field::type_id::create("cmderr");
         datacount = uvm_reg_field::type_id::create("datacount");

         progbufsize.configure(this, 5, 24, "RO", 1, 5'b00000, 0, 0, 0);
         busy.configure(this, 1, 12, "RO", 1, 1'b0, 1, 0, 0);
         relaxedpriv.configure(this, 1, 11, "RW", 1, 1'b0, 0, 1, 0);
         cmderr.configure(this, 3, 8, "W1C", 1, 3'b000, 1, 0, 0);
         datacount.configure(this, 4, 0, "RO", 1, 4'h0, 0, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: authdata_reg
   // 
   // Authentication Data
   //--------------------------------------------------------------------

   class authdata_reg extends uvm_reg;
      `uvm_object_utils(authdata_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "authdata_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: command_reg
   // 
   // Abstract Command
   //--------------------------------------------------------------------

   class command_reg extends uvm_reg;
      `uvm_object_utils(command_reg)

      rand uvm_reg_field cmdtype; 
      rand uvm_reg_field control; 


      // Function: new
      // 
      function new(string name = "command_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         cmdtype = uvm_reg_field::type_id::create("cmdtype");
         control = uvm_reg_field::type_id::create("control");

         cmdtype.configure(this, 8, 24, "WO", 1, 8'h00, 1, 1, 1);
         control.configure(this, 24, 0, "WO", 1, 24'h000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: confstrptr0_reg
   // 
   // Configuration String Pointer 0
   //--------------------------------------------------------------------

   class confstrptr0_reg extends uvm_reg;
      `uvm_object_utils(confstrptr0_reg)

      uvm_reg_field addr; 


      // Function: new
      // 
      function new(string name = "confstrptr0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         addr = uvm_reg_field::type_id::create("addr");

         addr.configure(this, 32, 0, "RO", 1, 32'h00000000, 0, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: confstrptr1_reg
   // 
   // Configuration String Pointer 1
   //--------------------------------------------------------------------

   class confstrptr1_reg extends uvm_reg;
      `uvm_object_utils(confstrptr1_reg)

      uvm_reg_field addr; 


      // Function: new
      // 
      function new(string name = "confstrptr1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         addr = uvm_reg_field::type_id::create("addr");

         addr.configure(this, 32, 0, "RO", 1, 32'h00000000, 0, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: confstrptr2_reg
   // 
   // Configuration String Pointer 2
   //--------------------------------------------------------------------

   class confstrptr2_reg extends uvm_reg;
      `uvm_object_utils(confstrptr2_reg)

      uvm_reg_field addr; 


      // Function: new
      // 
      function new(string name = "confstrptr2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         addr = uvm_reg_field::type_id::create("addr");

         addr.configure(this, 32, 0, "RO", 1, 32'h00000000, 0, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: confstrptr3_reg
   // 
   // Configuration String Pointer 3
   //--------------------------------------------------------------------

   class confstrptr3_reg extends uvm_reg;
      `uvm_object_utils(confstrptr3_reg)

      uvm_reg_field addr; 


      // Function: new
      // 
      function new(string name = "confstrptr3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         addr = uvm_reg_field::type_id::create("addr");

         addr.configure(this, 32, 0, "RO", 1, 32'h00000000, 0, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom0_reg
   // 
   // Custom Features 0
   //--------------------------------------------------------------------

   class custom0_reg extends uvm_reg;
      `uvm_object_utils(custom0_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom10_reg
   // 
   // Custom Features 10
   //--------------------------------------------------------------------

   class custom10_reg extends uvm_reg;
      `uvm_object_utils(custom10_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom10_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom11_reg
   // 
   // Custom Features 11
   //--------------------------------------------------------------------

   class custom11_reg extends uvm_reg;
      `uvm_object_utils(custom11_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom11_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom12_reg
   // 
   // Custom Features 12
   //--------------------------------------------------------------------

   class custom12_reg extends uvm_reg;
      `uvm_object_utils(custom12_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom12_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom13_reg
   // 
   // Custom Features 13
   //--------------------------------------------------------------------

   class custom13_reg extends uvm_reg;
      `uvm_object_utils(custom13_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom13_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom14_reg
   // 
   // Custom Features 14
   //--------------------------------------------------------------------

   class custom14_reg extends uvm_reg;
      `uvm_object_utils(custom14_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom14_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom15_reg
   // 
   // Custom Features 15
   //--------------------------------------------------------------------

   class custom15_reg extends uvm_reg;
      `uvm_object_utils(custom15_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom15_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom1_reg
   // 
   // Custom Features 1
   //--------------------------------------------------------------------

   class custom1_reg extends uvm_reg;
      `uvm_object_utils(custom1_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom2_reg
   // 
   // Custom Features 2
   //--------------------------------------------------------------------

   class custom2_reg extends uvm_reg;
      `uvm_object_utils(custom2_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom3_reg
   // 
   // Custom Features 3
   //--------------------------------------------------------------------

   class custom3_reg extends uvm_reg;
      `uvm_object_utils(custom3_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom4_reg
   // 
   // Custom Features 4
   //--------------------------------------------------------------------

   class custom4_reg extends uvm_reg;
      `uvm_object_utils(custom4_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom4_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom5_reg
   // 
   // Custom Features 5
   //--------------------------------------------------------------------

   class custom5_reg extends uvm_reg;
      `uvm_object_utils(custom5_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom5_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom6_reg
   // 
   // Custom Features 6
   //--------------------------------------------------------------------

   class custom6_reg extends uvm_reg;
      `uvm_object_utils(custom6_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom6_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom7_reg
   // 
   // Custom Features 7
   //--------------------------------------------------------------------

   class custom7_reg extends uvm_reg;
      `uvm_object_utils(custom7_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom7_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom8_reg
   // 
   // Custom Features 8
   //--------------------------------------------------------------------

   class custom8_reg extends uvm_reg;
      `uvm_object_utils(custom8_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom8_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom9_reg
   // 
   // Custom Features 9
   //--------------------------------------------------------------------

   class custom9_reg extends uvm_reg;
      `uvm_object_utils(custom9_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom9_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: custom_reg
   // 
   // Custom Features
   //--------------------------------------------------------------------

   class custom_reg extends uvm_reg;
      `uvm_object_utils(custom_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "custom_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data0_reg
   // 
   // Abstract Data 0
   //--------------------------------------------------------------------

   class data0_reg extends uvm_reg;
      `uvm_object_utils(data0_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "data0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data10_reg
   // 
   // Abstract Data 10
   //--------------------------------------------------------------------

   class data10_reg extends uvm_reg;
      `uvm_object_utils(data10_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data10_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data11_reg
   // 
   // Abstract Data 11
   //--------------------------------------------------------------------

   class data11_reg extends uvm_reg;
      `uvm_object_utils(data11_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data11_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data1_reg
   // 
   // Abstract Data 1
   //--------------------------------------------------------------------

   class data1_reg extends uvm_reg;
      `uvm_object_utils(data1_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data2_reg
   // 
   // Abstract Data 2
   //--------------------------------------------------------------------

   class data2_reg extends uvm_reg;
      `uvm_object_utils(data2_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data3_reg
   // 
   // Abstract Data 3
   //--------------------------------------------------------------------

   class data3_reg extends uvm_reg;
      `uvm_object_utils(data3_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data4_reg
   // 
   // Abstract Data 4
   //--------------------------------------------------------------------

   class data4_reg extends uvm_reg;
      `uvm_object_utils(data4_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data4_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data5_reg
   // 
   // Abstract Data 5
   //--------------------------------------------------------------------

   class data5_reg extends uvm_reg;
      `uvm_object_utils(data5_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data5_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data6_reg
   // 
   // Abstract Data 6
   //--------------------------------------------------------------------

   class data6_reg extends uvm_reg;
      `uvm_object_utils(data6_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data6_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data7_reg
   // 
   // Abstract Data 7
   //--------------------------------------------------------------------

   class data7_reg extends uvm_reg;
      `uvm_object_utils(data7_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data7_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data8_reg
   // 
   // Abstract Data 8
   //--------------------------------------------------------------------

   class data8_reg extends uvm_reg;
      `uvm_object_utils(data8_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data8_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: data9_reg
   // 
   // Abstract Data 9
   //--------------------------------------------------------------------

   class data9_reg extends uvm_reg;
      `uvm_object_utils(data9_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "data9_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: dmcontrol_reg
   // 
   // Debug Module Control
   //--------------------------------------------------------------------

   class dmcontrol_reg extends uvm_reg;
      `uvm_object_utils(dmcontrol_reg)

      rand uvm_reg_field haltreq; 
      rand uvm_reg_field resumereq; 
      rand uvm_reg_field hartreset; 
      rand uvm_reg_field ackhavereset; 
      rand uvm_reg_field ackunavail; 
      rand uvm_reg_field hasel; 
      rand uvm_reg_field hartsello; 
      rand uvm_reg_field hartselhi; 
      rand uvm_reg_field setkeepalive; 
      rand uvm_reg_field clrkeepalive; 
      rand uvm_reg_field setresethaltreq; 
      rand uvm_reg_field clrresethaltreq; 
      rand uvm_reg_field ndmreset; 
      rand uvm_reg_field dmactive; 


      // Function: new
      // 
      function new(string name = "dmcontrol_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         haltreq = uvm_reg_field::type_id::create("haltreq");
         resumereq = uvm_reg_field::type_id::create("resumereq");
         hartreset = uvm_reg_field::type_id::create("hartreset");
         ackhavereset = uvm_reg_field::type_id::create("ackhavereset");
         ackunavail = uvm_reg_field::type_id::create("ackunavail");
         hasel = uvm_reg_field::type_id::create("hasel");
         hartsello = uvm_reg_field::type_id::create("hartsello");
         hartselhi = uvm_reg_field::type_id::create("hartselhi");
         setkeepalive = uvm_reg_field::type_id::create("setkeepalive");
         clrkeepalive = uvm_reg_field::type_id::create("clrkeepalive");
         setresethaltreq = uvm_reg_field::type_id::create("setresethaltreq");
         clrresethaltreq = uvm_reg_field::type_id::create("clrresethaltreq");
         ndmreset = uvm_reg_field::type_id::create("ndmreset");
         dmactive = uvm_reg_field::type_id::create("dmactive");

         haltreq.configure(this, 1, 31, "WO", 1, 1'b0, 0, 1, 0);
         resumereq.configure(this, 1, 30, "WO", 1, 1'b0, 0, 1, 0);
         hartreset.configure(this, 1, 29, "RW", 1, 1'b0, 1, 1, 0);
         ackhavereset.configure(this, 1, 28, "WO", 1, 1'b0, 0, 1, 0);
         ackunavail.configure(this, 1, 27, "WO", 1, 1'b0, 0, 1, 0);
         hasel.configure(this, 1, 26, "RW", 1, 1'b0, 1, 1, 0);
         hartsello.configure(this, 10, 16, "RW", 1, 10'b0000000000, 1, 1, 0);
         hartselhi.configure(this, 10, 6, "RW", 1, 10'b0000000000, 1, 1, 0);
         setkeepalive.configure(this, 1, 5, "WO", 1, 1'b0, 0, 1, 0);
         clrkeepalive.configure(this, 1, 4, "WO", 1, 1'b0, 0, 1, 0);
         setresethaltreq.configure(this, 1, 3, "WO", 1, 1'b0, 0, 1, 0);
         clrresethaltreq.configure(this, 1, 2, "WO", 1, 1'b0, 0, 1, 0);
         ndmreset.configure(this, 1, 1, "RW", 1, 1'b0, 1, 1, 0);
         dmactive.configure(this, 1, 0, "RW", 1, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: dmcs2_reg
   // 
   // Debug Module Control and Status 2
   //--------------------------------------------------------------------

   class dmcs2_reg extends uvm_reg;
      `uvm_object_utils(dmcs2_reg)

      rand uvm_reg_field grouptype; 
      rand uvm_reg_field dmexttrigger; 
      rand uvm_reg_field group; 
      rand uvm_reg_field hgwrite; 
      rand uvm_reg_field hgselect; 


      // Function: new
      // 
      function new(string name = "dmcs2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         grouptype = uvm_reg_field::type_id::create("grouptype");
         dmexttrigger = uvm_reg_field::type_id::create("dmexttrigger");
         group = uvm_reg_field::type_id::create("group");
         hgwrite = uvm_reg_field::type_id::create("hgwrite");
         hgselect = uvm_reg_field::type_id::create("hgselect");

         grouptype.configure(this, 1, 11, "RW", 1, 1'b0, 1, 1, 0);
         dmexttrigger.configure(this, 4, 7, "RW", 1, 4'h0, 1, 1, 0);
         group.configure(this, 5, 2, "RW", 1, 5'b00000, 0, 1, 0);
         hgwrite.configure(this, 1, 1, "WO", 1, 1'b0, 0, 1, 0);
         hgselect.configure(this, 1, 0, "RW", 1, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: dmstatus_reg
   // 
   // Debug Module Status
   //--------------------------------------------------------------------

   class dmstatus_reg extends uvm_reg;
      `uvm_object_utils(dmstatus_reg)

      uvm_reg_field ndmresetpending; 
      uvm_reg_field stickyunavail; 
      uvm_reg_field impebreak; 
      uvm_reg_field allhavereset; 
      uvm_reg_field anyhavereset; 
      uvm_reg_field allresumeack; 
      uvm_reg_field anyresumeack; 
      uvm_reg_field allnonexistent; 
      uvm_reg_field anynonexistent; 
      uvm_reg_field allunavail; 
      uvm_reg_field anyunavail; 
      uvm_reg_field allrunning; 
      uvm_reg_field anyrunning; 
      uvm_reg_field allhalted; 
      uvm_reg_field anyhalted; 
      uvm_reg_field authenticated; 
      uvm_reg_field authbusy; 
      uvm_reg_field hasresethaltreq; 
      uvm_reg_field confstrptrvalid; 
      uvm_reg_field version; 


      // Function: new
      // 
      function new(string name = "dmstatus_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         ndmresetpending = uvm_reg_field::type_id::create("ndmresetpending");
         stickyunavail = uvm_reg_field::type_id::create("stickyunavail");
         impebreak = uvm_reg_field::type_id::create("impebreak");
         allhavereset = uvm_reg_field::type_id::create("allhavereset");
         anyhavereset = uvm_reg_field::type_id::create("anyhavereset");
         allresumeack = uvm_reg_field::type_id::create("allresumeack");
         anyresumeack = uvm_reg_field::type_id::create("anyresumeack");
         allnonexistent = uvm_reg_field::type_id::create("allnonexistent");
         anynonexistent = uvm_reg_field::type_id::create("anynonexistent");
         allunavail = uvm_reg_field::type_id::create("allunavail");
         anyunavail = uvm_reg_field::type_id::create("anyunavail");
         allrunning = uvm_reg_field::type_id::create("allrunning");
         anyrunning = uvm_reg_field::type_id::create("anyrunning");
         allhalted = uvm_reg_field::type_id::create("allhalted");
         anyhalted = uvm_reg_field::type_id::create("anyhalted");
         authenticated = uvm_reg_field::type_id::create("authenticated");
         authbusy = uvm_reg_field::type_id::create("authbusy");
         hasresethaltreq = uvm_reg_field::type_id::create("hasresethaltreq");
         confstrptrvalid = uvm_reg_field::type_id::create("confstrptrvalid");
         version = uvm_reg_field::type_id::create("version");

         ndmresetpending.configure(this, 1, 24, "RO", 1, 1'b0, 0, 0, 0);
         stickyunavail.configure(this, 1, 23, "RO", 1, 1'b0, 0, 0, 0);
         impebreak.configure(this, 1, 22, "RO", 1, 1'b0, 0, 0, 0);
         allhavereset.configure(this, 1, 19, "RO", 1, 1'b0, 0, 0, 0);
         anyhavereset.configure(this, 1, 18, "RO", 1, 1'b0, 0, 0, 0);
         allresumeack.configure(this, 1, 17, "RO", 1, 1'b0, 0, 0, 0);
         anyresumeack.configure(this, 1, 16, "RO", 1, 1'b0, 0, 0, 0);
         allnonexistent.configure(this, 1, 15, "RO", 1, 1'b0, 0, 0, 0);
         anynonexistent.configure(this, 1, 14, "RO", 1, 1'b0, 0, 0, 0);
         allunavail.configure(this, 1, 13, "RO", 1, 1'b0, 0, 0, 0);
         anyunavail.configure(this, 1, 12, "RO", 1, 1'b0, 0, 0, 0);
         allrunning.configure(this, 1, 11, "RO", 1, 1'b0, 0, 0, 0);
         anyrunning.configure(this, 1, 10, "RO", 1, 1'b0, 0, 0, 0);
         allhalted.configure(this, 1, 9, "RO", 1, 1'b0, 0, 0, 0);
         anyhalted.configure(this, 1, 8, "RO", 1, 1'b0, 0, 0, 0);
         authenticated.configure(this, 1, 7, "RO", 1, 1'b0, 0, 0, 0);
         authbusy.configure(this, 1, 6, "RO", 1, 1'b0, 1, 0, 0);
         hasresethaltreq.configure(this, 1, 5, "RO", 1, 1'b0, 0, 0, 0);
         confstrptrvalid.configure(this, 1, 4, "RO", 1, 1'b0, 0, 0, 0);
         version.configure(this, 4, 0, "RO", 1, 4'h3, 1, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: haltsum0_reg
   // 
   // Halt Summary 0
   //--------------------------------------------------------------------

   class haltsum0_reg extends uvm_reg;
      `uvm_object_utils(haltsum0_reg)

      uvm_reg_field haltsum0_reg; 


      // Function: new
      // 
      function new(string name = "haltsum0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         haltsum0_reg = uvm_reg_field::type_id::create("haltsum0_reg");

         haltsum0_reg.configure(this, 32, 0, "RO", 1, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: haltsum1_reg
   // 
   // Halt Summary 1
   //--------------------------------------------------------------------

   class haltsum1_reg extends uvm_reg;
      `uvm_object_utils(haltsum1_reg)

      uvm_reg_field haltsum1_reg; 


      // Function: new
      // 
      function new(string name = "haltsum1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         haltsum1_reg = uvm_reg_field::type_id::create("haltsum1_reg");

         haltsum1_reg.configure(this, 32, 0, "RO", 1, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: haltsum2_reg
   // 
   // Halt Summary 2
   //--------------------------------------------------------------------

   class haltsum2_reg extends uvm_reg;
      `uvm_object_utils(haltsum2_reg)

      uvm_reg_field haltsum2_reg; 


      // Function: new
      // 
      function new(string name = "haltsum2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         haltsum2_reg = uvm_reg_field::type_id::create("haltsum2_reg");

         haltsum2_reg.configure(this, 32, 0, "RO", 1, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: haltsum3_reg
   // 
   // Halt Summary 3
   //--------------------------------------------------------------------

   class haltsum3_reg extends uvm_reg;
      `uvm_object_utils(haltsum3_reg)

      uvm_reg_field haltsum3_reg; 


      // Function: new
      // 
      function new(string name = "haltsum3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         haltsum3_reg = uvm_reg_field::type_id::create("haltsum3_reg");

         haltsum3_reg.configure(this, 32, 0, "RO", 1, 32'h00000000, 1, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: hartinfo_reg
   // 
   // Hart Info
   //--------------------------------------------------------------------

   class hartinfo_reg extends uvm_reg;
      `uvm_object_utils(hartinfo_reg)

      uvm_reg_field nscratch; 
      uvm_reg_field dataaccess; 
      uvm_reg_field datasize; 
      uvm_reg_field dataaddr; 


      // Function: new
      // 
      function new(string name = "hartinfo_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         nscratch = uvm_reg_field::type_id::create("nscratch");
         dataaccess = uvm_reg_field::type_id::create("dataaccess");
         datasize = uvm_reg_field::type_id::create("datasize");
         dataaddr = uvm_reg_field::type_id::create("dataaddr");

         nscratch.configure(this, 4, 20, "RO", 1, 4'h0, 0, 0, 0);
         dataaccess.configure(this, 1, 16, "RO", 1, 1'b0, 0, 0, 0);
         datasize.configure(this, 4, 12, "RO", 1, 4'h0, 0, 0, 0);
         dataaddr.configure(this, 12, 0, "RO", 1, 12'h000, 0, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: hawindow_reg
   // 
   // Hart Array Window
   //--------------------------------------------------------------------

   class hawindow_reg extends uvm_reg;
      `uvm_object_utils(hawindow_reg)

      rand uvm_reg_field maskdata; 


      // Function: new
      // 
      function new(string name = "hawindow_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         maskdata = uvm_reg_field::type_id::create("maskdata");

         maskdata.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: hawindowsel_reg
   // 
   // Hart Array Window Select
   //--------------------------------------------------------------------

   class hawindowsel_reg extends uvm_reg;
      `uvm_object_utils(hawindowsel_reg)

      rand uvm_reg_field hawindowsel_reg; 


      // Function: new
      // 
      function new(string name = "hawindowsel_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         hawindowsel_reg = uvm_reg_field::type_id::create("hawindowsel_reg");

         hawindowsel_reg.configure(this, 15, 0, "RW", 1, 15'b000000000000000, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: nextdm_reg
   // 
   // Next Debug Module
   //--------------------------------------------------------------------

   class nextdm_reg extends uvm_reg;
      `uvm_object_utils(nextdm_reg)

      uvm_reg_field addr; 


      // Function: new
      // 
      function new(string name = "nextdm_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         addr = uvm_reg_field::type_id::create("addr");

         addr.configure(this, 32, 0, "RO", 1, 32'h00000000, 0, 0, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf0_reg
   // 
   // Program Buffer 0
   //--------------------------------------------------------------------

   class progbuf0_reg extends uvm_reg;
      `uvm_object_utils(progbuf0_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "progbuf0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf10_reg
   // 
   // Program Buffer 10
   //--------------------------------------------------------------------

   class progbuf10_reg extends uvm_reg;
      `uvm_object_utils(progbuf10_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf10_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf11_reg
   // 
   // Program Buffer 11
   //--------------------------------------------------------------------

   class progbuf11_reg extends uvm_reg;
      `uvm_object_utils(progbuf11_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf11_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf12_reg
   // 
   // Program Buffer 12
   //--------------------------------------------------------------------

   class progbuf12_reg extends uvm_reg;
      `uvm_object_utils(progbuf12_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf12_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf13_reg
   // 
   // Program Buffer 13
   //--------------------------------------------------------------------

   class progbuf13_reg extends uvm_reg;
      `uvm_object_utils(progbuf13_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf13_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf14_reg
   // 
   // Program Buffer 14
   //--------------------------------------------------------------------

   class progbuf14_reg extends uvm_reg;
      `uvm_object_utils(progbuf14_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf14_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf15_reg
   // 
   // Program Buffer 15
   //--------------------------------------------------------------------

   class progbuf15_reg extends uvm_reg;
      `uvm_object_utils(progbuf15_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf15_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf1_reg
   // 
   // Program Buffer 1
   //--------------------------------------------------------------------

   class progbuf1_reg extends uvm_reg;
      `uvm_object_utils(progbuf1_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf2_reg
   // 
   // Program Buffer 2
   //--------------------------------------------------------------------

   class progbuf2_reg extends uvm_reg;
      `uvm_object_utils(progbuf2_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf3_reg
   // 
   // Program Buffer 3
   //--------------------------------------------------------------------

   class progbuf3_reg extends uvm_reg;
      `uvm_object_utils(progbuf3_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf4_reg
   // 
   // Program Buffer 4
   //--------------------------------------------------------------------

   class progbuf4_reg extends uvm_reg;
      `uvm_object_utils(progbuf4_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf4_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf5_reg
   // 
   // Program Buffer 5
   //--------------------------------------------------------------------

   class progbuf5_reg extends uvm_reg;
      `uvm_object_utils(progbuf5_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf5_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf6_reg
   // 
   // Program Buffer 6
   //--------------------------------------------------------------------

   class progbuf6_reg extends uvm_reg;
      `uvm_object_utils(progbuf6_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf6_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf7_reg
   // 
   // Program Buffer 7
   //--------------------------------------------------------------------

   class progbuf7_reg extends uvm_reg;
      `uvm_object_utils(progbuf7_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf7_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf8_reg
   // 
   // Program Buffer 8
   //--------------------------------------------------------------------

   class progbuf8_reg extends uvm_reg;
      `uvm_object_utils(progbuf8_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf8_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: progbuf9_reg
   // 
   // Program Buffer 9
   //--------------------------------------------------------------------

   class progbuf9_reg extends uvm_reg;
      `uvm_object_utils(progbuf9_reg)

      rand uvm_reg_field F;


      // Function: new
      // 
      function new(string name = "progbuf9_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");
         F.configure(this, 32, 0, "RW", 1, 32'h00000000, 0, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbaddress0_reg
   // 
   // System Bus Address 31:0
   //--------------------------------------------------------------------

   class sbaddress0_reg extends uvm_reg;
      `uvm_object_utils(sbaddress0_reg)

      rand uvm_reg_field address; 


      // Function: new
      // 
      function new(string name = "sbaddress0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         address = uvm_reg_field::type_id::create("address");

         address.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbaddress1_reg
   // 
   // System Bus Address 63:32
   //--------------------------------------------------------------------

   class sbaddress1_reg extends uvm_reg;
      `uvm_object_utils(sbaddress1_reg)

      rand uvm_reg_field address; 


      // Function: new
      // 
      function new(string name = "sbaddress1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         address = uvm_reg_field::type_id::create("address");

         address.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbaddress2_reg
   // 
   // System Bus Address 95:64
   //--------------------------------------------------------------------

   class sbaddress2_reg extends uvm_reg;
      `uvm_object_utils(sbaddress2_reg)

      rand uvm_reg_field address; 


      // Function: new
      // 
      function new(string name = "sbaddress2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         address = uvm_reg_field::type_id::create("address");

         address.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbaddress3_reg
   // 
   // System Bus Address 127:96
   //--------------------------------------------------------------------

   class sbaddress3_reg extends uvm_reg;
      `uvm_object_utils(sbaddress3_reg)

      rand uvm_reg_field address; 


      // Function: new
      // 
      function new(string name = "sbaddress3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         address = uvm_reg_field::type_id::create("address");

         address.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbcs_reg
   // 
   // System Bus Access Control and Status
   //--------------------------------------------------------------------

   class sbcs_reg extends uvm_reg;
      `uvm_object_utils(sbcs_reg)

      uvm_reg_field sbversion; 
      uvm_reg_field sbbusyerror; 
      uvm_reg_field sbbusy; 
      rand uvm_reg_field sbreadonaddr; 
      rand uvm_reg_field sbaccess; 
      rand uvm_reg_field sbautoincrement; 
      rand uvm_reg_field sbreadondata; 
      uvm_reg_field sberror; 
      uvm_reg_field sbasize; 
      uvm_reg_field sbaccess128; 
      uvm_reg_field sbaccess64; 
      uvm_reg_field sbaccess32; 
      uvm_reg_field sbaccess16; 
      uvm_reg_field sbaccess8; 


      // Function: new
      // 
      function new(string name = "sbcs_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         sbversion = uvm_reg_field::type_id::create("sbversion");
         sbbusyerror = uvm_reg_field::type_id::create("sbbusyerror");
         sbbusy = uvm_reg_field::type_id::create("sbbusy");
         sbreadonaddr = uvm_reg_field::type_id::create("sbreadonaddr");
         sbaccess = uvm_reg_field::type_id::create("sbaccess");
         sbautoincrement = uvm_reg_field::type_id::create("sbautoincrement");
         sbreadondata = uvm_reg_field::type_id::create("sbreadondata");
         sberror = uvm_reg_field::type_id::create("sberror");
         sbasize = uvm_reg_field::type_id::create("sbasize");
         sbaccess128 = uvm_reg_field::type_id::create("sbaccess128");
         sbaccess64 = uvm_reg_field::type_id::create("sbaccess64");
         sbaccess32 = uvm_reg_field::type_id::create("sbaccess32");
         sbaccess16 = uvm_reg_field::type_id::create("sbaccess16");
         sbaccess8 = uvm_reg_field::type_id::create("sbaccess8");

         sbversion.configure(this, 3, 29, "RO", 1, 3'b001, 1, 0, 0);
         sbbusyerror.configure(this, 1, 22, "W1C", 1, 1'b0, 1, 0, 0);
         sbbusy.configure(this, 1, 21, "RO", 1, 1'b0, 1, 0, 0);
         sbreadonaddr.configure(this, 1, 20, "RW", 1, 1'b0, 1, 1, 0);
         sbaccess.configure(this, 3, 17, "RW", 1, 3'b010, 1, 1, 0);
         sbautoincrement.configure(this, 1, 16, "RW", 1, 1'b0, 1, 1, 0);
         sbreadondata.configure(this, 1, 15, "RW", 1, 1'b0, 1, 1, 0);
         sberror.configure(this, 3, 12, "W1C", 1, 3'b000, 1, 0, 0);
         sbasize.configure(this, 7, 5, "RO", 1, 7'b0000000, 0, 0, 0);
         sbaccess128.configure(this, 1, 4, "RO", 1, 1'b0, 0, 0, 0);
         sbaccess64.configure(this, 1, 3, "RO", 1, 1'b0, 0, 0, 0);
         sbaccess32.configure(this, 1, 2, "RO", 1, 1'b0, 0, 0, 0);
         sbaccess16.configure(this, 1, 1, "RO", 1, 1'b0, 0, 0, 0);
         sbaccess8.configure(this, 1, 0, "RO", 1, 1'b0, 0, 0, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbdata0_reg
   // 
   // System Bus Data 31:0
   //--------------------------------------------------------------------

   class sbdata0_reg extends uvm_reg;
      `uvm_object_utils(sbdata0_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "sbdata0_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbdata1_reg
   // 
   // System Bus Data 63:32
   //--------------------------------------------------------------------

   class sbdata1_reg extends uvm_reg;
      `uvm_object_utils(sbdata1_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "sbdata1_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbdata2_reg
   // 
   // System Bus Data 95:64
   //--------------------------------------------------------------------

   class sbdata2_reg extends uvm_reg;
      `uvm_object_utils(sbdata2_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "sbdata2_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: sbdata3_reg
   // 
   // System Bus Data 127:96
   //--------------------------------------------------------------------

   class sbdata3_reg extends uvm_reg;
      `uvm_object_utils(sbdata3_reg)

      rand uvm_reg_field data; 


      // Function: new
      // 
      function new(string name = "sbdata3_reg");
         super.new(name, 32, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         data = uvm_reg_field::type_id::create("data");

         data.configure(this, 32, 0, "RW", 1, 32'h00000000, 1, 1, 1);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: dm_regs
   // 
   //--------------------------------------------------------------------

   class dm_regs extends uvm_reg_block;
      `uvm_object_utils(dm_regs)

      rand dmstatus_reg dmstatus; // Debug Module Status
      rand dmcontrol_reg dmcontrol; // Debug Module Control
      rand hartinfo_reg hartinfo; // Hart Info
      rand hawindowsel_reg hawindowsel; // Hart Array Window Select
      rand hawindow_reg hawindow; // Hart Array Window
      rand abstractcs_reg abstractcs; // Abstract Control and Status
      rand command_reg command; // Abstract Command
      rand abstractauto_reg abstractauto; // Abstract Command Autoexec
      rand confstrptr0_reg confstrptr0; // Configuration String Pointer 0
      rand confstrptr1_reg confstrptr1; // Configuration String Pointer 1
      rand confstrptr2_reg confstrptr2; // Configuration String Pointer 2
      rand confstrptr3_reg confstrptr3; // Configuration String Pointer 3
      rand nextdm_reg nextdm; // Next Debug Module
      rand data0_reg data0; // Abstract Data 0
      rand data1_reg data1; // Abstract Data 1
      rand data2_reg data2; // Abstract Data 2
      rand data3_reg data3; // Abstract Data 3
      rand data4_reg data4; // Abstract Data 4
      rand data5_reg data5; // Abstract Data 5
      rand data6_reg data6; // Abstract Data 6
      rand data7_reg data7; // Abstract Data 7
      rand data8_reg data8; // Abstract Data 8
      rand data9_reg data9; // Abstract Data 9
      rand data10_reg data10; // Abstract Data 10
      rand data11_reg data11; // Abstract Data 11
      rand progbuf0_reg progbuf0; // Program Buffer 0
      rand progbuf1_reg progbuf1; // Program Buffer 1
      rand progbuf2_reg progbuf2; // Program Buffer 2
      rand progbuf3_reg progbuf3; // Program Buffer 3
      rand progbuf4_reg progbuf4; // Program Buffer 4
      rand progbuf5_reg progbuf5; // Program Buffer 5
      rand progbuf6_reg progbuf6; // Program Buffer 6
      rand progbuf7_reg progbuf7; // Program Buffer 7
      rand progbuf8_reg progbuf8; // Program Buffer 8
      rand progbuf9_reg progbuf9; // Program Buffer 9
      rand progbuf10_reg progbuf10; // Program Buffer 10
      rand progbuf11_reg progbuf11; // Program Buffer 11
      rand progbuf12_reg progbuf12; // Program Buffer 12
      rand progbuf13_reg progbuf13; // Program Buffer 13
      rand progbuf14_reg progbuf14; // Program Buffer 14
      rand progbuf15_reg progbuf15; // Program Buffer 15
      rand authdata_reg authdata; // Authentication Data
      rand dmcs2_reg dmcs2; // Debug Module Control and Status 2
      rand haltsum0_reg haltsum0; // Halt Summary 0
      rand haltsum1_reg haltsum1; // Halt Summary 1
      rand haltsum2_reg haltsum2; // Halt Summary 2
      rand haltsum3_reg haltsum3; // Halt Summary 3
      rand sbcs_reg sbcs; // System Bus Access Control and Status
      rand sbaddress0_reg sbaddress0; // System Bus Address 31:0
      rand sbaddress1_reg sbaddress1; // System Bus Address 63:32
      rand sbaddress2_reg sbaddress2; // System Bus Address 95:64
      rand sbaddress3_reg sbaddress3; // System Bus Address 127:96
      rand sbdata0_reg sbdata0; // System Bus Data 31:0
      rand sbdata1_reg sbdata1; // System Bus Data 63:32
      rand sbdata2_reg sbdata2; // System Bus Data 95:64
      rand sbdata3_reg sbdata3; // System Bus Data 127:96
      rand custom_reg custom; // Custom Features
      rand custom0_reg custom0; // Custom Features 0
      rand custom1_reg custom1; // Custom Features 1
      rand custom2_reg custom2; // Custom Features 2
      rand custom3_reg custom3; // Custom Features 3
      rand custom4_reg custom4; // Custom Features 4
      rand custom5_reg custom5; // Custom Features 5
      rand custom6_reg custom6; // Custom Features 6
      rand custom7_reg custom7; // Custom Features 7
      rand custom8_reg custom8; // Custom Features 8
      rand custom9_reg custom9; // Custom Features 9
      rand custom10_reg custom10; // Custom Features 10
      rand custom11_reg custom11; // Custom Features 11
      rand custom12_reg custom12; // Custom Features 12
      rand custom13_reg custom13; // Custom Features 13
      rand custom14_reg custom14; // Custom Features 14
      rand custom15_reg custom15; // Custom Features 15

      uvm_reg_map dm_regs_map; 


      // Function: new
      // 
      function new(string name = "dm_regs");
         super.new(name, UVM_NO_COVERAGE);
      endfunction


      // Function: build
      // 
      virtual function void build();
         dmstatus = dmstatus_reg::type_id::create("dmstatus");
         dmstatus.configure(this);
         dmstatus.build();

         dmcontrol = dmcontrol_reg::type_id::create("dmcontrol");
         dmcontrol.configure(this);
         dmcontrol.build();

         hartinfo = hartinfo_reg::type_id::create("hartinfo");
         hartinfo.configure(this);
         hartinfo.build();

         hawindowsel = hawindowsel_reg::type_id::create("hawindowsel");
         hawindowsel.configure(this);
         hawindowsel.build();

         hawindow = hawindow_reg::type_id::create("hawindow");
         hawindow.configure(this);
         hawindow.build();

         abstractcs = abstractcs_reg::type_id::create("abstractcs");
         abstractcs.configure(this);
         abstractcs.build();

         command = command_reg::type_id::create("command");
         command.configure(this);
         command.build();

         abstractauto = abstractauto_reg::type_id::create("abstractauto");
         abstractauto.configure(this);
         abstractauto.build();

         confstrptr0 = confstrptr0_reg::type_id::create("confstrptr0");
         confstrptr0.configure(this);
         confstrptr0.build();

         confstrptr1 = confstrptr1_reg::type_id::create("confstrptr1");
         confstrptr1.configure(this);
         confstrptr1.build();

         confstrptr2 = confstrptr2_reg::type_id::create("confstrptr2");
         confstrptr2.configure(this);
         confstrptr2.build();

         confstrptr3 = confstrptr3_reg::type_id::create("confstrptr3");
         confstrptr3.configure(this);
         confstrptr3.build();

         nextdm = nextdm_reg::type_id::create("nextdm");
         nextdm.configure(this);
         nextdm.build();

         data0 = data0_reg::type_id::create("data0");
         data0.configure(this);
         data0.build();

         data1 = data1_reg::type_id::create("data1");
         data1.configure(this);
         data1.build();

         data2 = data2_reg::type_id::create("data2");
         data2.configure(this);
         data2.build();

         data3 = data3_reg::type_id::create("data3");
         data3.configure(this);
         data3.build();

         data4 = data4_reg::type_id::create("data4");
         data4.configure(this);
         data4.build();

         data5 = data5_reg::type_id::create("data5");
         data5.configure(this);
         data5.build();

         data6 = data6_reg::type_id::create("data6");
         data6.configure(this);
         data6.build();

         data7 = data7_reg::type_id::create("data7");
         data7.configure(this);
         data7.build();

         data8 = data8_reg::type_id::create("data8");
         data8.configure(this);
         data8.build();

         data9 = data9_reg::type_id::create("data9");
         data9.configure(this);
         data9.build();

         data10 = data10_reg::type_id::create("data10");
         data10.configure(this);
         data10.build();

         data11 = data11_reg::type_id::create("data11");
         data11.configure(this);
         data11.build();

         progbuf0 = progbuf0_reg::type_id::create("progbuf0");
         progbuf0.configure(this);
         progbuf0.build();

         progbuf1 = progbuf1_reg::type_id::create("progbuf1");
         progbuf1.configure(this);
         progbuf1.build();

         progbuf2 = progbuf2_reg::type_id::create("progbuf2");
         progbuf2.configure(this);
         progbuf2.build();

         progbuf3 = progbuf3_reg::type_id::create("progbuf3");
         progbuf3.configure(this);
         progbuf3.build();

         progbuf4 = progbuf4_reg::type_id::create("progbuf4");
         progbuf4.configure(this);
         progbuf4.build();

         progbuf5 = progbuf5_reg::type_id::create("progbuf5");
         progbuf5.configure(this);
         progbuf5.build();

         progbuf6 = progbuf6_reg::type_id::create("progbuf6");
         progbuf6.configure(this);
         progbuf6.build();

         progbuf7 = progbuf7_reg::type_id::create("progbuf7");
         progbuf7.configure(this);
         progbuf7.build();

         progbuf8 = progbuf8_reg::type_id::create("progbuf8");
         progbuf8.configure(this);
         progbuf8.build();

         progbuf9 = progbuf9_reg::type_id::create("progbuf9");
         progbuf9.configure(this);
         progbuf9.build();

         progbuf10 = progbuf10_reg::type_id::create("progbuf10");
         progbuf10.configure(this);
         progbuf10.build();

         progbuf11 = progbuf11_reg::type_id::create("progbuf11");
         progbuf11.configure(this);
         progbuf11.build();

         progbuf12 = progbuf12_reg::type_id::create("progbuf12");
         progbuf12.configure(this);
         progbuf12.build();

         progbuf13 = progbuf13_reg::type_id::create("progbuf13");
         progbuf13.configure(this);
         progbuf13.build();

         progbuf14 = progbuf14_reg::type_id::create("progbuf14");
         progbuf14.configure(this);
         progbuf14.build();

         progbuf15 = progbuf15_reg::type_id::create("progbuf15");
         progbuf15.configure(this);
         progbuf15.build();

         authdata = authdata_reg::type_id::create("authdata");
         authdata.configure(this);
         authdata.build();

         dmcs2 = dmcs2_reg::type_id::create("dmcs2");
         dmcs2.configure(this);
         dmcs2.build();

         haltsum0 = haltsum0_reg::type_id::create("haltsum0");
         haltsum0.configure(this);
         haltsum0.build();

         haltsum1 = haltsum1_reg::type_id::create("haltsum1");
         haltsum1.configure(this);
         haltsum1.build();

         haltsum2 = haltsum2_reg::type_id::create("haltsum2");
         haltsum2.configure(this);
         haltsum2.build();

         haltsum3 = haltsum3_reg::type_id::create("haltsum3");
         haltsum3.configure(this);
         haltsum3.build();

         sbcs = sbcs_reg::type_id::create("sbcs");
         sbcs.configure(this);
         sbcs.build();

         sbaddress0 = sbaddress0_reg::type_id::create("sbaddress0");
         sbaddress0.configure(this);
         sbaddress0.build();

         sbaddress1 = sbaddress1_reg::type_id::create("sbaddress1");
         sbaddress1.configure(this);
         sbaddress1.build();

         sbaddress2 = sbaddress2_reg::type_id::create("sbaddress2");
         sbaddress2.configure(this);
         sbaddress2.build();

         sbaddress3 = sbaddress3_reg::type_id::create("sbaddress3");
         sbaddress3.configure(this);
         sbaddress3.build();

         sbdata0 = sbdata0_reg::type_id::create("sbdata0");
         sbdata0.configure(this);
         sbdata0.build();

         sbdata1 = sbdata1_reg::type_id::create("sbdata1");
         sbdata1.configure(this);
         sbdata1.build();

         sbdata2 = sbdata2_reg::type_id::create("sbdata2");
         sbdata2.configure(this);
         sbdata2.build();

         sbdata3 = sbdata3_reg::type_id::create("sbdata3");
         sbdata3.configure(this);
         sbdata3.build();

         custom = custom_reg::type_id::create("custom");
         custom.configure(this);
         custom.build();

         custom0 = custom0_reg::type_id::create("custom0");
         custom0.configure(this);
         custom0.build();

         custom1 = custom1_reg::type_id::create("custom1");
         custom1.configure(this);
         custom1.build();

         custom2 = custom2_reg::type_id::create("custom2");
         custom2.configure(this);
         custom2.build();

         custom3 = custom3_reg::type_id::create("custom3");
         custom3.configure(this);
         custom3.build();

         custom4 = custom4_reg::type_id::create("custom4");
         custom4.configure(this);
         custom4.build();

         custom5 = custom5_reg::type_id::create("custom5");
         custom5.configure(this);
         custom5.build();

         custom6 = custom6_reg::type_id::create("custom6");
         custom6.configure(this);
         custom6.build();

         custom7 = custom7_reg::type_id::create("custom7");
         custom7.configure(this);
         custom7.build();

         custom8 = custom8_reg::type_id::create("custom8");
         custom8.configure(this);
         custom8.build();

         custom9 = custom9_reg::type_id::create("custom9");
         custom9.configure(this);
         custom9.build();

         custom10 = custom10_reg::type_id::create("custom10");
         custom10.configure(this);
         custom10.build();

         custom11 = custom11_reg::type_id::create("custom11");
         custom11.configure(this);
         custom11.build();

         custom12 = custom12_reg::type_id::create("custom12");
         custom12.configure(this);
         custom12.build();

         custom13 = custom13_reg::type_id::create("custom13");
         custom13.configure(this);
         custom13.build();

         custom14 = custom14_reg::type_id::create("custom14");
         custom14.configure(this);
         custom14.build();

         custom15 = custom15_reg::type_id::create("custom15");
         custom15.configure(this);
         custom15.build();

         dm_regs_map = create_map("dm_regs_map", 'h0, 4, UVM_LITTLE_ENDIAN, 1);
         default_map = dm_regs_map;

         dm_regs_map.add_reg(dmstatus, 'h11, "RW");
         dm_regs_map.add_reg(dmcontrol, 'h10, "RW");
         dm_regs_map.add_reg(hartinfo, 'h12, "RW");
         dm_regs_map.add_reg(hawindowsel, 'h14, "RW");
         dm_regs_map.add_reg(hawindow, 'h15, "RW");
         dm_regs_map.add_reg(abstractcs, 'h16, "RW");
         dm_regs_map.add_reg(command, 'h17, "RW");
         dm_regs_map.add_reg(abstractauto, 'h18, "RW");
         dm_regs_map.add_reg(confstrptr0, 'h19, "RW");
         dm_regs_map.add_reg(confstrptr1, 'h1a, "RW");
         dm_regs_map.add_reg(confstrptr2, 'h1b, "RW");
         dm_regs_map.add_reg(confstrptr3, 'h1c, "RW");
         dm_regs_map.add_reg(nextdm, 'h1d, "RW");
         dm_regs_map.add_reg(data0, 'h4, "RW");
         dm_regs_map.add_reg(data1, 'h5, "RW");
         dm_regs_map.add_reg(data2, 'h6, "RW");
         dm_regs_map.add_reg(data3, 'h7, "RW");
         dm_regs_map.add_reg(data4, 'h8, "RW");
         dm_regs_map.add_reg(data5, 'h9, "RW");
         dm_regs_map.add_reg(data6, 'ha, "RW");
         dm_regs_map.add_reg(data7, 'hb, "RW");
         dm_regs_map.add_reg(data8, 'hc, "RW");
         dm_regs_map.add_reg(data9, 'hd, "RW");
         dm_regs_map.add_reg(data10, 'he, "RW");
         dm_regs_map.add_reg(data11, 'hf, "RW");
         dm_regs_map.add_reg(progbuf0, 'h20, "RW");
         dm_regs_map.add_reg(progbuf1, 'h21, "RW");
         dm_regs_map.add_reg(progbuf2, 'h22, "RW");
         dm_regs_map.add_reg(progbuf3, 'h23, "RW");
         dm_regs_map.add_reg(progbuf4, 'h24, "RW");
         dm_regs_map.add_reg(progbuf5, 'h25, "RW");
         dm_regs_map.add_reg(progbuf6, 'h26, "RW");
         dm_regs_map.add_reg(progbuf7, 'h27, "RW");
         dm_regs_map.add_reg(progbuf8, 'h28, "RW");
         dm_regs_map.add_reg(progbuf9, 'h29, "RW");
         dm_regs_map.add_reg(progbuf10, 'h2a, "RW");
         dm_regs_map.add_reg(progbuf11, 'h2b, "RW");
         dm_regs_map.add_reg(progbuf12, 'h2c, "RW");
         dm_regs_map.add_reg(progbuf13, 'h2d, "RW");
         dm_regs_map.add_reg(progbuf14, 'h2e, "RW");
         dm_regs_map.add_reg(progbuf15, 'h2f, "RW");
         dm_regs_map.add_reg(authdata, 'h30, "RW");
         dm_regs_map.add_reg(dmcs2, 'h32, "RW");
         dm_regs_map.add_reg(haltsum0, 'h40, "RW");
         dm_regs_map.add_reg(haltsum1, 'h13, "RW");
         dm_regs_map.add_reg(haltsum2, 'h34, "RW");
         dm_regs_map.add_reg(haltsum3, 'h35, "RW");
         dm_regs_map.add_reg(sbcs, 'h38, "RW");
         dm_regs_map.add_reg(sbaddress0, 'h39, "RW");
         dm_regs_map.add_reg(sbaddress1, 'h3a, "RW");
         dm_regs_map.add_reg(sbaddress2, 'h3b, "RW");
         dm_regs_map.add_reg(sbaddress3, 'h37, "RW");
         dm_regs_map.add_reg(sbdata0, 'h3c, "RW");
         dm_regs_map.add_reg(sbdata1, 'h3d, "RW");
         dm_regs_map.add_reg(sbdata2, 'h3e, "RW");
         dm_regs_map.add_reg(sbdata3, 'h3f, "RW");
         dm_regs_map.add_reg(custom, 'h1f, "RW");
         dm_regs_map.add_reg(custom0, 'h70, "RW");
         dm_regs_map.add_reg(custom1, 'h71, "RW");
         dm_regs_map.add_reg(custom2, 'h72, "RW");
         dm_regs_map.add_reg(custom3, 'h73, "RW");
         dm_regs_map.add_reg(custom4, 'h74, "RW");
         dm_regs_map.add_reg(custom5, 'h75, "RW");
         dm_regs_map.add_reg(custom6, 'h76, "RW");
         dm_regs_map.add_reg(custom7, 'h77, "RW");
         dm_regs_map.add_reg(custom8, 'h78, "RW");
         dm_regs_map.add_reg(custom9, 'h79, "RW");
         dm_regs_map.add_reg(custom10, 'h7a, "RW");
         dm_regs_map.add_reg(custom11, 'h7b, "RW");
         dm_regs_map.add_reg(custom12, 'h7c, "RW");
         dm_regs_map.add_reg(custom13, 'h7d, "RW");
         dm_regs_map.add_reg(custom14, 'h7e, "RW");
         dm_regs_map.add_reg(custom15, 'h7f, "RW");

         lock_model();
      endfunction
   endclass


endpackage
